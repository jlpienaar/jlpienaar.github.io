I recently had the simultaneously frustrating but also empowering experience of setting up my own website (jaypienaar.com, where you're likely reading this!). I almost feel embarrassed that it took me so long (altogether, about two full days). It really shouldn't be so hard. So why is it hard?

This post is about setting up a simple static website (like a landing page, portfolio, and contact form) for an individual who just wants to make it easy for people to find them on the internet. If you're looking for something more complicated, like an interactive web app, or if you want various features like analytics, monetization, complex ecommerce, and the like, then you might not find this post so useful.

Some of you reading this already have your own website. Maybe you even have a really nice website that you whipped up super quick while drinking a latte at the corner caf√©. Well if so, then I hate you with a deep and eternal passion. But this post isn't for you. It's for people like me: people who like learning new stuff, who are not afraid of tech and typing things at the command line, who have a can-do attitude towards the internet, but are easily distracted by little details and who have a tiny demon inside them that wants to do everything in the most efficient way possible, even if that means (ironically) wasting two days trying to compare the fine print between half a dozen competing web services. 

Does that really specific description sound like you? Great! Read on and learn from my mistakes.

Before I get into details, it's worth explaining, in broad brush strokes, just exactly why it is so hard to set up your own personal website. Think of it like this: your partner asks you to go out and buy a can of tomato soup. Sounds simple, right? This should be a breeze, you say to yourself. The problem is that you're going to the biggest supermarket in the world, on a day when it is full of random sales and promotions and is absolutely packed. The moment you step in there, there's people yelling offers at you, like buy one can of tomato soup and get a can of beans half price, and there's like 50 different brands of tomato soup, each with different pros and cons all crammed into the fine print on the label -- fancy or cheap? No preservatives? Which of these fairtrade/organic certifications is more legit? Very soon, you have gone insane. What seemed like a perfectly straightforward task at the beginning suddenly becomes an impossibly complicated optimization problem.

Am I the only person who finds grocery shopping to be like this?

Anyway, to get your website up and running, the first thing you probably want is your own domain name, like yourname.com, and then you want to find a company to host it on the internet. This should be simple, but it turns out to be just as bad as buying tomato soup.

Let's start with registering your domain name. If you do a web search about it, you'll quickly find "lists of things to watch out for when buying a domain name". Those lists are scary. They make you think: Aw geez, if I slip up and buy from the wrong company, I'm gonna get screwed big time. And how will I ever decide what features I want bundled together with my domain registration?

Here's my advice: forget that stuff. Do a couple of quick searches to find out what the biggest and most popular domain name registrars are and pick one (based on my own research, in alphabetical order: Bluehost, Dreamhost, GoDaddy, Namecheap). Don't overthink it. Some of them might try to sell you various add-ons, but don't bother.

There is only one add-on that is worth considering: "domain privacy". When you register a domain, you have to give the domain name registrar some personal information, like your full name and address. Without domain privacy, anybody will be able to look up this information by going to iCANN WHOIS, and typing in your domain. Domain privacy hides that information from the general public. This feature should be cheap (less than a dollar per year) or free with your domain name registration. This is the only add-on that you might want to consider.

As we continue on our journey into the jungle of website hosting, we shall see that features and add-ons are the main problem. To make it through this jungle with a clear head, it helps to step back and look at the market forces that are driving this madness. The thing is, there are lots of people out there who want to set up a website. Many of those people are just like you: they only want something simple. But a lot of them represent companies who need to have all kinds of special features on their website. Even some individual entrepreneurs will want to have a lot more than just a few pages of static html. Professional writers might want something like Wordpress, which provides a whole suite of tools for analyzing web traffic, getting money through advertizing and affiliate links, selling products via ecommerce, and so on. But not you -- all you want is a page with your face on it, a little `about me' blurb, and links to your social media and contact info. Right? 

So do you really need to go shopping around, looking for which web hosting platform offers the best features for the lowest price? Well, that's what I spend most of my time doing, until I suddently realized, in a flash of inspiration, that I didn't need any of that stuff, and so I shouldn't have to pay for it. Quality web hosting costs upwards of about $4 per month. (If you find one for less, you'll have to trawl through their terms and conditions to find out what the catch is, and do you really want to punish yourself like that?) I actually bought a pretty good hosting plan with BlueHost, with domain name registration bundled in, and ended up cancelling it when I realized that I was paying for a ton of (no doubt excellent) features that I simply did not need. 

So here's the beautiful principle that I have discovered. Think of it as your machete for chopping a path through the overwhelming jungle of online services. The principle is: don't go looking at services and trying to decide whether you want them. Instead, start by getting clear about what you need, and ruthlessly exclude anything that offers you more than that. If what you need is very simple, then this is by far the most efficient way to proceed. 

In the end, I realized that I could get free static website hosting through Github Pages, and I could use my own custom domain name. That's it, it was all I needed! I cancelled my BlueHost plan and kept only my domain name registration, which costs me a grand total of $13 a year.

So let me walk you through how Github Pages works.

The first thing you need to know is the very basics of using Github. If you are a person who is scared of tech, maybe this is too much of a barrier for you -- but really, it is pretty easy if you get past your fears. 

git is a very popular version control software. "Version control" is something that anybody needs if they are involved in working on a large project with many contributers who like to work on different parts of the project simultaneously. If you're an academic like me, you've probably had the experience of sharing files with your co-authors, with names like "version-17-Bobs-edits" and "version-17b-Sallys-edits" and "version-17c-Johns-attempt-to-resolve-conflicts-between-Bob-and-Sallys-edits" and so on. And you probably thought to yourself, "what if there were a more efficient way to keep track of people's edits and resolve conflicts and overlaps between them?" Well that's exactly what git is! Unfortunately most people who really could benefit from using git have no idea how to use it.

Basically, you have some files in a folder on your computer, and you want to use git for version controlling them. But since you want to share these files with your collaborators, you need an online platform that will host your files, and where your collaborators can download them, make edits, and then re-upload them. And you want this online platform to understand the language of git, so that when people simultaneously upload their edits, they can type in special git commands to keep track of versions, merge their edits together in a consistent way, and all of that nice version control stuff. That platform is Github.

Now, I know that you're just making a personal website that only you will edit, so technically you don't need git at all. However, there are two reasons why you might want to do this through Github. Firstly, Github offers a service called Github Pages, which means that if you upload the html files of your website, you can host it for free on Github Pages, and you can even use your own domain name if you already bought one. Secondly, if you want to learn collaborative version control, this is a great excuse to get started!

The first thing to do is download and install git. To use it, you just open up a terminal or command prompt (depending whether you;re on Linux or Windows) and type something like 
[git <do something>]
where <do-something> could be any number of special commands that git understands. I won't teach you anything about it here; if you want to learn it I suggest this excellent free ebook: https://git-scm.com/book/en/v2
You don't actually need to know how much git in order to set up your website, aside from a few commands that I will tell you here.

Once you've downloaded git, check that its working by opening up a command line and typing [git]; you should see a list of commands and explanations. If you get a "command not recognized" error you might need to check that git was added to your PATH variable, or try reinstalling.

Now go to github.com and create your account. Once you've logged in, you need to create a new repository (A "repository" is just Github's fancy name for a folder with your files in it that is hosted on Github. The idea is that you should have one repository for each project that you have. In this case we are making a repository that will keep all of your website files). Just go to the "repositories" tab and click the "New" button. Keep all the default options, just make sure it is set to "Public", and make sure you name your repository "username.github.io", where username is your GitHub username. For example if your username is bobsmith, you should name the repository [bobsmith.github.io] . (From here onwards, whenever you see bobsmith, replace it with your own username). You have to give it this name, because that is how Github Pages knows that this is where you keep your website files.

Next, open up a command line and navigate to the folder on your computer where you want to keep your website files. Now type
git clone https://github.com/bobsmith/bobsmith.github.io
This is telling git that you want to download a copy of your Github repository on your computer, so that you can make edits to it. This should create a new folder called [bobsmith.github.io] on your computer. Change into that folder by typing
cd /bobsmith.github.io

Since this folder is empty, it's time to put your website in it! The easiest way to do this is browse the internet and find a nice downloadable website template that you like. You can pay for it, but there are plenty of good free templates (I got mine from HTML5-UP). Download the template and unzip all the files into your bobsmith.github.io folder. (Or if you are feeling adventurous, why not learn HTML and CSS and write your own website files from scratch? Mozilla has a great guide you can follow). 

Very important: remember that you will soon be uploading all the files in your folder bobsmith.github.io onto a public website where anyone can see it. So absolutely do not put any files or information in this folder that you would not want the entire world to see. That includes comments written in your html files -- all of it will be visible to anyone! You have no idea how common it is for people to accidentally upload sensitive information to public Github repositories. Don't be one of them!  

Now you've made edits to your folder, and made sure there's no sensitive information in it, you are ready to tell Github to upload them. Open a command line, navigate into the bobsmith.github.io folder if you aren't already there, and type
git add --all		(Tells git to put all your edits in the "staging area")
git commit -m "Created my website files" 
(Tells git to save a snapshot of all the edits in your staging area, and tags it with a little message to remind yourself what your edits were)
git push -u origin master
(Tells git to upload your edits and merge them with your repository on Github. "origin" and "master" are the name of git "branches", so you are telling git to take what is in the "master" branch, on your local filesystem, and move it to the "origin" branch, which is your Github repository. You don't need to know about branches here, but it is worth learning about them if you want to use git for other things. The [-u] is useful because it lets you avoid specifying branch names later on when you do a [git pull].)

Assuming that went smoothly, you should be able to log into Github and see that your bobsmith.github.io repository now has all your website files in it! (If it didn't work, try deleting your local copy of the repository and starting over again from the [git clone] step). 

That's the hard work done! Your website is now hosted on Github Pages! Open your browser and go to https://bobsmith.github.io and you should see your website!

If you want to make any changes to the website files, don't just edit them on your computer -- this will de-synchronize your local copy with the one that is hosted on Github. It's not a big deal if that happens, but you will have to learn a bit more git to resolve that problem! To make it as smooth as possible, before making any changes to your website files, first open a command line, navigate into your bobsmith.github.io folder, and type
git pull
(Tells Github to download your website files and merge them with your local files).
Now you can make any changes you want to the files in your bobsmith.github.io folder, and when you're done, just repeat the old pattern:
git add --all
git commit -m "Some message about what you changed"
git push -u origin master

If you're fine with having your website name as bobsmith.github.io then you are done. But probably you would rather have something like www.bobsmith.com as your website.

Let's say that you have purchased the domain name bobsmith.com. This is called an "apex" domain because it doesn't have the `www' at the front, and www.bobsmith.com is called a sumdomain. Since you own the apex domain, you automatically have rights to the subdomain as well. 

First log in to Github and open your bobsmith.github.io repository. Click `Settings' and scroll down until you see the section labeled "Custom domain". Type www.bobsmith.com into the box and click `Save'. This tells Github that whenever they receive traffic coming in to bobsmith.github.io, they should rename it as www.bobsmith.com. But we're not done yet -- we also need to tell your domain name registrar that when people type bobsmith.com or www.bobsmith.com into their address bar, it should route that traffic to bobsmith.github.io. 

To do this, login to your account with your domain name registrar (that you signed up for when you bought your domain name). Look around or use their guide to find out where you can add a CNAME record to your domain. You should be an entry for "host record", where you write www.bobsmith.com, and an entry for "points to", where you write bobsmith.github.io . Save the record, and now you are finally done! You should be able to type bobsmith.com into your browser and it will take you to your website.







 






















Assuming that all you want is a simple static website, like a landing page and a portfolio and a contact form so people can find you, then the only thing you have to worry about is buying a domain name and finding a host.

At this point, 



Getting a domain name is simple enough, and relatively cheap. Sure, there's a bunch of different places you could buy it, but looking at the most popular options, the differences between them are not so big. You could just pick one at random and you'd be fine.

